# Busca por exploits públicos para câmeras IP
# Este script automatiza a busca por exploits conhecidos usando o modelo ou chipset da câmera

import webbrowser



# Opção de detecção automática ou manual
import socket
import re

def detectar_modelo_automatico(ip):
    """
    Tenta identificar modelo/chipset via banner HTTP ou SSH.
    """
    banners = []
    # Tenta HTTP
    try:
        import requests
        url = f"http://{ip}/"
        resp = requests.get(url, timeout=5)
        # Procura por modelo no HTML
        modelo = None
        if resp.status_code == 200:
            # Procura por padrões comuns
            padroes = [r'Model(?:o)?[:\s]*([\w\-\.]+)', r'chipset[:\s]*([\w\-\.]+)', r'Camera ([\w\-]+)', r'Firmware[:\s]*([\w\-\.]+)']
            for padrao in padroes:
                m = re.search(padrao, resp.text, re.IGNORECASE)
                if m:
                    modelo = m.group(1)
                    break
        # Procura por Server header
        server = resp.headers.get('Server')
        if server:
            banners.append(f"Server header: {server}")
        if modelo:
            banners.append(f"Detectado via HTML: {modelo}")
    except Exception:
        pass
    # Tenta SSH
    try:
        s = socket.socket()
        s.settimeout(3)
        s.connect((ip, 22))
        banner = s.recv(1024).decode(errors='ignore')
        if banner:
            banners.append(f"SSH banner: {banner.strip()}")
        s.close()
    except Exception:
        pass
    if banners:
        print("\n[INFO] Possíveis informações detectadas:")
        for b in banners:
            print("-", b)
        # Tenta extrair modelo do banner
        for b in banners:
            m = re.search(r'([A-Z0-9\-]{4,})', b)
            if m:
                return m.group(1)
    return None

print("Escolha o modo de detecção do modelo/chipset:")
print("1 - Manual (digitar)")
print("2 - Automático (tentar detectar por IP)")
modo = input("Opção [1/2]: ").strip()
if modo == '2':
    ip = input("Digite o IP da câmera: ").strip()
    modelo_camera = detectar_modelo_automatico(ip)
    if modelo_camera:
        print(f"\n[OK] Modelo/chipset detectado: {modelo_camera}")
    else:
        print("[ERRO] Não foi possível detectar automaticamente. Informe manualmente.")
        modelo_camera = input("Digite o modelo ou chipset da câmera: ").strip()
else:
    modelo_camera = input("Digite o modelo ou chipset da câmera: ").strip()


# Busca automática na Exploit-DB (API pública)
import requests

def buscar_exploits_exploitdb(query):
    print(f"\nBuscando exploits na Exploit-DB para: {query}")
    try:
        url = f"https://www.exploit-db.com/search?json=true&text={query}"
        resp = requests.get(url, timeout=10)
        if resp.status_code == 200:
            data = resp.json()
            if data and isinstance(data, list) and len(data) > 0:
                print(f"Foram encontrados {len(data)} exploits:")
                for exploit in data[:10]:  # Mostra até 10 resultados
                    print(f"- {exploit.get('description', 'Sem descrição')} (ID: {exploit.get('id')})")
                    print(f"  Link: https://www.exploit-db.com/exploits/{exploit.get('id')}")
            else:
                print("Nenhum exploit encontrado na Exploit-DB.")
        else:
            print("Erro ao acessar Exploit-DB.")
    except Exception as e:
        print(f"Erro na busca Exploit-DB: {e}")

buscar_exploits_exploitdb(modelo_camera)

# URLs de bancos de dados de exploits para abrir no navegador
urls = [
    f"https://www.exploit-db.com/search?port=&type=remote&platform=hardware&author=&text={modelo_camera}",
    f"https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword={modelo_camera}",
    f"https://www.google.com/search?q={modelo_camera}+exploit",
    f"https://github.com/search?q={modelo_camera}+exploit",
]

print("\nAbrindo buscas por exploits conhecidos para:", modelo_camera)
for url in urls:
    webbrowser.open(url)
